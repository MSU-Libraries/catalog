#!/bin/bash

run_help() {
    echo ""
    echo "Purpose: Setup SSH access to all the deploy servers"
    echo ""
    echo "Expected User-defined Variables:"
    echo "  - STACK_NAME: Name of the stack"
    echo "  - DEPLOY_HOST_1: The first host in the cluster"
    echo "  - DEPLOY_HOST_2: The second host in the cluster"
    echo "  - DEPLOY_HOST_3: The third host in the cluster"
    echo "  - ENCODED_PRIVATE_KEY: Private SSH key that has been base64 encoded"
    echo ""
    echo "Failure Scenarios:"
    echo "  - If any required variables are not set"
    echo "  - The STACK_NAME job artifact was not properly passed to the job"
    echo ""
}

if [ -n "$1" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ] || [ "$1" = "help" ]; then
    run_help
    exit 0
fi

check() {
    SERVICE=$1;
    HEALTHY=0;
    for HOST in {1..3}; do
        ATTEMPTS=0;
        NODE_HOSTNAME=$(node_hostname "${HOST}")
        while [[ "${ATTEMPTS}" -le 60 ]]; do
            echo "$(date +'%m-%d-%Y %T %z') -- (${NODE_HOSTNAME}): Checking ${SERVICE} health...";
            if run_on_node "${HOST}" "/usr/local/ncpa/plugins/check_${SERVICE}.sh ${STACK_NAME}"; then
                echo "$(date +'%m-%d-%Y %T %z') -- (${NODE_HOSTNAME}): ${SERVICE} is healthy!";
                HEALTHY=1;
                break;
            fi
            echo "$(date +'%m-%d-%Y %T %z') -- (${NODE_HOSTNAME}): ${SERVICE} not healthy yet. Waiting...";
            sleep 15;
            ATTEMPTS=$((ATTEMPTS+1));
        done
        if [[ "${HEALTHY}" -ne 1 ]]; then
            echo "$(date +'%m-%d-%Y %T %z') -- (${NODE_HOSTNAME}): ${SERVICE} not healthy after max attempts. Failing job!";
            exit 1;
        fi;
    done
}

get_pc_common() {
    git clone "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.msu.edu/msu-libraries/devops/catalog-infrastructure.git" /tmp/catalog-infrastructure/
    cp /tmp/catalog-infrastructure/configure-playbook/roles/deploy-helper-scripts/files/pc-common .
    rm -rf /tmp/catalog-infrastructure/
    # shellcheck disable=SC1091
    if ! . pc-common > /dev/null; then
        echo "Can not source pc-common. Aborting." >&2
        exit 1
    fi
}

before_script() {
    # exit script if any command fails
    set -e

    # set xtrace to show commands being run in the CI job logs
    set -o xtrace

    # Check for STACK_NAME
    echo "Testing for STACK_NAME (is '$STACK_NAME')"
    test -n "${STACK_NAME}"

    # Before script before SSH template
    if [ -z "$SERVER" ] || [ -z "$ENCODED_PRIVATE_KEY" ] ; then
       echo "Missing one or more of the required variables: SERVER, ENCODED_PRIVATE_KEY";
       echo "SERVER: ${SERVER}";
       echo "ENCODED_PRIVATE_KEY:  $(printf '%s' "${ENCODED_PRIVATE_KEY}" | cut -c 3)...";
       exit 1;
    fi

    # Setup SSH access to a server using $ENCODED_PRIVATE_KEY and $SERVER
    apk add openssh-client bash || apt install openssh-client;
    eval "$( ssh-agent -s )";
    echo "$ENCODED_PRIVATE_KEY" | base64 -d | ssh-add -;
    install -d -m 700 ~/.ssh/;
    ( umask 022; touch ~/.ssh/known_hosts );
    {
        ssh-keyscan "gitlab.msu.edu"
        ssh-keyscan "$SERVER"
        ssh-keyscan "$DEPLOY_HOST_2"
        ssh-keyscan "$DEPLOY_HOST_3"
    } >> ~/.ssh/known_hosts;

    # Setup access to pc-common script
    get_pc_common

    # Docker login to all servers
    run_on_all_nodes "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY"

    # Get the number of attempts for this job
    apk add jq curl || apt install -y jq curl;
    ATTEMPTS=$(curl -s --header "PRIVATE-TOKEN: ${RO_CICD_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs?include_retried=true" | jq "[.[] | select(.name == \"${CI_JOB_NAME}\")] | length");
    echo "${CI_JOB_NAME// /_}_JobAttempts ${ATTEMPTS}" >> metrics.txt;

    # Determine job start time; used to calculate runtime metrics
    START=$(date +%s);
    export START;
}
