#!/bin/sh

runhelp() {
    echo ""
    echo "Purpose: Setup SSH access to all the deploy servers"
    echo ""
    echo "Expected User-defined Variables:"
    echo "  - STACK_NAME: Name of the stack"
    echo "  - DEPLOY_HOST_1: The first host in the cluster"
    echo "  - DEPLOY_HOST_2: The second host in the cluster"
    echo "  - DEPLOY_HOST_3: The third host in the cluster"
    echo "  - ENCODED_PRIVATE_KEY: Private SSH key that has been base64 encoded"
    echo ""
    echo "Failure Scenarios:"
    echo "  - If any required variables are not set"
    echo "  - The STACK_NAME job artifact was not properly passed to the job"
    echo ""
}

if [ -n "$1" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ] || [ "$1" = "help" ]; then
    runhelp
    exit 0
fi

beforescript() {
    # exit script if any command fails
    set -e

    # set xtrace to show commands being run in the CI job logs
    set -o xtrace

    # Check for STACK_NAME
    echo "Testing for STACK_NAME (is '$STACK_NAME')"
    test -n "${STACK_NAME}"

    # Before script before SSH template
    if [ -z "$SERVER" ] || [ -z "$ENCODED_PRIVATE_KEY" ] ; then
       echo "Missing one or more of the required variables: SERVER, ENCODED_PRIVATE_KEY";
       echo "SERVER: ${SERVER}";
       echo "ENCODED_PRIVATE_KEY:  $(printf '%s' "${ENCODED_PRIVATE_KEY}" | cut -c 3)...";
       exit 1;
    fi

    # Setup SSH access to a server using $ENCODED_PRIVATE_KEY and $SERVER
    apk add openssh-client bash || apt install openssh-client;
    eval "$( ssh-agent -s )";
    echo "$ENCODED_PRIVATE_KEY" | base64 -d | ssh-add -;
    install -d -m 700 ~/.ssh/;
    ( umask 022; touch ~/.ssh/known_hosts );
    {
        ssh-keyscan "$SERVER"
        ssh-keyscan "$DEPLOY_HOST_2"
        ssh-keyscan "$DEPLOY_HOST_3"
    } >> ~/.ssh/known_hosts;

    # Docker login to all servers
    ssh deploy@"$DEPLOY_HOST_1" "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY";
    ssh deploy@"$DEPLOY_HOST_2" "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY";
    ssh deploy@"$DEPLOY_HOST_3" "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY";

    # Get the number of retries for this job
    apk add jq curl || apt install -y jq curl;
    RETRIES=$(curl --header "PRIVATE-TOKEN: ${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs?include_retried=true" | jq "[.[] | select(.name == \"${CI_JOB_NAME}\")] | length")
    echo "${CI_JOB_NAME// /}_retries" "${RETRIES}" >> metrics.txt 
}
