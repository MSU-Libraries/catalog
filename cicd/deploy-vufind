#!/bin/bash

source "${CI_PROJECT_DIR}"/cicd/before-script

runhelp() {
    echo ""
    echo "Purpose: Deploy the Vufind application stack"
    echo ""
    echo "Expected User-defined Variables:"
    echo "  - STACK_NAME: Stack name"
    echo "  - DEPLOY_HOST_1: The first host in the cluster"
    echo "  - DEPLOY_HOST_2: The second host in the cluster"
    echo "  - DEPLOY_HOST_3: The third host in the cluster"
    echo ""
    echo "Failure Scenarios:"
    echo "  - Deploying the stack fails"
    echo ""
}

if [[ -n "$1" || $1 == "-h" || $1 == "--help" || $1 == "help" ]]; then
    runhelp
    exit 0
fi

declare LOCAL_DIR="/mnt/shared/local/${STACK_NAME}"
declare LIVE_DIR="${LOCAL_DIR}/live"
# shellcheck disable=SC2155
declare TIMESTAMP=$( date +%Y%m%d%H%M%S )
# shellcheck disable=SC2034
declare SSH_USER=deploy

# TODO refactor to link all EXCEPT for those listed here (config.ini and folio.ini)
declare -a LINK_CONFIGS=("RecordDataFormatter.ini")

make_archive() {
    declare recent_archive
    recent_archive=$( run_on_node "1" "find '${LOCAL_DIR}/.archive/' -mindepth 1 -maxdepth 1 -type d -printf '%f\n' 2>/dev/null | sort | tail -n1" )
    declare -a extra_args
    if [[ -n $recent_archive ]]; then
        extra_args+=("--link-dest" "$LOCAL_DIR/.archive/${recent_archive}/live/")
    fi

    run_on_node "1" "pc-rsync \"${STACK_NAME}\" ${extra_args[*]} -a -s \"${LIVE_DIR}/\" -d \"$LOCAL_DIR/.archive/${TIMESTAMP}/live/\""
}

add_bind_mount() {
    declare SOURCE_DIR="$1"
    declare MOUNT_DIR="$2"
    run_on_all_nodes "pc-fstab $STACK_NAME -s \"${SOURCE_DIR}\" -m \"${MOUNT_DIR}\""
}

remove_bind_mount() {
    declare MOUNT_DIR="$1"
    run_on_all_nodes "pc-fstab $STACK_NAME --rm -m \"${MOUNT_DIR}\""
}

sync_git_repo() {
    run_on_node "1" "pc-clone $STACK_NAME -p /repo -u git@gitlab.msu.edu:msu-libraries/devops/catalog.git -b \"$DEPLOY_KEY\""
}

add_config_symlinks() {
    declare conf
    for conf in "${LINK_CONFIGS[@]}"; do
        run_on_node "1" "pc-symlink \"$STACK_NAME\" -vv -f \
            -t \"${LOCAL_DIR}/repo/vufind/local/config/vufind/${conf}\" \
            -s \"${LOCAL_DIR}/live/local/config/vufind/${conf}\""
    done
}

main() {
    # Wait for Solr to be healthy if not a fresh deploy
    # check solr
    # check zk

    # Pull images now to save time with stack deploy
    run_on_all_nodes "docker pull $CI_REGISTRY_IMAGE/vufind:${CI_COMMIT_SHORT_SHA}${EXTRA_TAG_SUFFIX}"

    if [[ $STACK_NAME == devel-* ]]; then
        # Generate an archive of existing content (if it exists)
        make_archive

        remove_bind_mount "$LIVE_DIR/module/Catalog"
        remove_bind_mount "$LIVE_DIR/themes/msul"

        # Sleeping for 2 hours; if setup is cancelled somehow, the container will eventually terminate
        TEMP_CTR_ID=$( run_on_node "1" "docker run -d --rm --env-file <( sed -e 's/^export //' -e 's/^\\(.*\\)=\"\\(.*\\)\"$/\1=\2/' ${COMPOSE_PATH}/.env ) -v \"$LIVE_DIR\":/media/live --name \"temp-${STACK_NAME}-$TIMESTAMP\" \"$CI_REGISTRY_IMAGE/vufind:${CI_COMMIT_SHORT_SHA}${EXTRA_TAG_SUFFIX}\" sleep 7200" )
        sleep 2
        run_on_node "1" "pc-install $STACK_NAME -v -o 1000 -g 1000 -m g+ws -d -t \"$LIVE_DIR\""
        run_on_node "1" "docker exec \"$TEMP_CTR_ID\" rsync -a /usr/local/vufind/ /media/live/"
        run_on_node "1" "docker rm -f \"$TEMP_CTR_ID\""

        sync_git_repo

        add_bind_mount "${LOCAL_DIR}/repo/vufind/module/Catalog" "${LIVE_DIR}/module/Catalog"
        add_bind_mount "${LOCAL_DIR}/repo/vufind/themes/msul" "${LIVE_DIR}/themes/msul"
        add_config_symlinks
    fi

    run_on_node 1 "docker stack deploy --with-registry-auth -c <(source ${COMPOSE_PATH}/.env; envsubst <${COMPOSE_PATH}/docker-compose.catalog.yml) ${STACK_NAME}-catalog";

    # Set URL
    URL="${SITE_HOSTNAME}";

    # Report the environemnt URL to GitLab
    echo "URL=${URL}" >> deploy.env;

    # Get runtime metrics
    END=$(date +%s); RUNTIME=$((END-START)); HOURS=$((RUNTIME / 3600)); MINUTES=$(( (RUNTIME % 3600) / 60 )); SECONDS=$(( (RUNTIME % 3600) % 60 ));
    echo "${CI_JOB_NAME// /_}_Runtime" $HOURS:$MINUTES:$SECONDS >> metrics.txt
}

before_script
main
