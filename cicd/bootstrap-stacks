#!/bin/bash

source "${CI_PROJECT_DIR}"/cicd/before-script

runhelp() {
    echo ""
    echo "Purpose: Perform first-time setup to the Solr and MariaDB stacks"
    echo ""
    echo "Expected User-defined Variables:"
    echo "  - STACK_NAME: Name of the stack"
    echo "  - DEPLOY_HOST_1: The first host in the cluster"
    echo "  - COMPOSE_PATH: Where the docker-compose files are located on the DEPLOY_HOST_1"
    echo ""
    echo "Failure Scenarios:"
    echo "  - The stack deploy command fails"
    echo ""
}

if [[ -n "$1" || $1 == "-h" || $1 == "--help" || $1 == "help" ]]; then
    runhelp
    exit 0
fi

main() {
      # Pull images now to save time with stack deploy
      ssh deploy@"${DEPLOY_HOST_1}" "docker pull $CI_REGISTRY_IMAGE/db:${CI_COMMIT_SHORT_SHA}${EXTRA_TAG_SUFFIX}" &
      ssh deploy@"${DEPLOY_HOST_2}" "docker pull $CI_REGISTRY_IMAGE/db:${CI_COMMIT_SHORT_SHA}${EXTRA_TAG_SUFFIX}" &
      ssh deploy@"${DEPLOY_HOST_3}" "docker pull $CI_REGISTRY_IMAGE/db:${CI_COMMIT_SHORT_SHA}${EXTRA_TAG_SUFFIX}";
      wait
      ssh deploy@"${DEPLOY_HOST_1}" "docker pull $CI_REGISTRY_IMAGE/solr:${CI_COMMIT_SHORT_SHA}${EXTRA_TAG_SUFFIX}" &
      ssh deploy@"${DEPLOY_HOST_2}" "docker pull $CI_REGISTRY_IMAGE/solr:${CI_COMMIT_SHORT_SHA}${EXTRA_TAG_SUFFIX}" &
      ssh deploy@"${DEPLOY_HOST_3}" "docker pull $CI_REGISTRY_IMAGE/solr:${CI_COMMIT_SHORT_SHA}${EXTRA_TAG_SUFFIX}";
      wait
      ssh deploy@"${DEPLOY_HOST_1}" "docker pull $CI_REGISTRY_IMAGE/zk:${CI_COMMIT_SHORT_SHA}${EXTRA_TAG_SUFFIX}" &
      ssh deploy@"${DEPLOY_HOST_2}" "docker pull $CI_REGISTRY_IMAGE/zk:${CI_COMMIT_SHORT_SHA}${EXTRA_TAG_SUFFIX}" &
      ssh deploy@"${DEPLOY_HOST_3}" "docker pull $CI_REGISTRY_IMAGE/zk:${CI_COMMIT_SHORT_SHA}${EXTRA_TAG_SUFFIX}";
      wait

      # TODO Make the db bootstrap more intelligent to check when it has completed startup, then wait until it has completed shutdown
      # otherwise this can cause occassional errors on the Verify Stack Health when it checks galera because the service logs will
      # report that it needs to be run with force_bootstrap
      ssh deploy@"${DEPLOY_HOST_1}" \
      "(docker volume ls | grep -q ${STACK_NAME}-mariadb || (docker stack deploy --with-registry-auth -c <(source ${COMPOSE_PATH}/.env; envsubst <${COMPOSE_PATH}/docker-compose.mariadb-cloud-bootstrap.yml) ${STACK_NAME}-mariadb && sleep 30 && docker stack rm ${STACK_NAME}-mariadb && sleep 25)) &&
      (docker volume ls | grep -q ${STACK_NAME}-solr_zk || (docker stack deploy --with-registry-auth -c <(source ${COMPOSE_PATH}/.env; envsubst <${COMPOSE_PATH}/docker-compose.zk.yml) ${STACK_NAME}-solr && sleep 60)) &&
      (docker volume ls | grep -q ${STACK_NAME}-solr_bitnami || (docker stack deploy --with-registry-auth -c <(source ${COMPOSE_PATH}/.env; envsubst <${COMPOSE_PATH}/docker-compose.solr-cloud-bootstrap.yml) ${STACK_NAME}-solr && sleep 90))"

      # Get runtime metrics
      END=$(date +%s); RUNTIME=$((END-START)); HOURS=$((RUNTIME / 3600)); MINUTES=$(( (RUNTIME % 3600) / 60 )); SECONDS=$(( (RUNTIME % 3600) % 60 ));
      echo "${CI_JOB_NAME// /_}_Runtime" $HOURS:$MINUTES:$SECONDS >> metrics.txt
}

beforescript
main
