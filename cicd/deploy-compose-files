#!/bin/bash

source "${CI_PROJECT_DIR}"/cicd/before-script

runhelp() {
    echo ""
    echo "Purpose: Performs updates to the docker-compose files and deploys them to the server"
    echo ""
    echo "Expected User-defined Variables:"
    echo "  - STACK_NAME: Name of the stack"
    echo "  - SITE_HOSTNAME: URL for the site"
    echo "  - BASICAUTH_FOR_RESOURCES: Authenication to use for developer resources (i.e. Traefik and Solr)"
    echo "  - GITHUB_USER_TOKEN: Used when downloading yq from Github"
    echo "  - DEPLOY_HOST_A: The first host in the cluster"
    echo "  - COMPOSE_PATH: Where to put the docker-compose files on the DEPLOY_HOST_A server"
    echo ""
    echo "Failure Scenarios:"
    echo "  - If any of the yq commands fail"
    echo "  - If the compose files fail to copy to the server"
    echo ""
}

if [[ -n "$1" || $1 == "-h" || $1 == "--help" || $1 == "help" ]]; then
    runhelp
    exit 0
fi

apply_devel_changes() {
    # Use dnschallenge cert resolver (instead of httpchallenge)
    ./yq -i \
    ".services.catalog.deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-router.tls.certresolver=msul-letsencrypt-dns\"" \
    docker-compose.yml;
    ./yq -i \
    ".services.catalog.deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-router.tls.domains[0].main=aws.lib.msu.edu\"" \
    docker-compose.yml;
    ./yq -i \
    ".services.catalog.deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-router.tls.domains[0].sans=*.aws.lib.msu.edu\"" \
    docker-compose.yml;
    ./yq -i \
    ".services.mail.deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-mail.tls.certresolver=msul-letsencrypt-dns\"" \
    docker-compose.yml;
    ./yq -i \
    ".services.mail.deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-mail.tls.domains[0].main=aws.lib.msu.edu\"" \
    docker-compose.yml;
    ./yq -i \
    ".services.mail.deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-mail.tls.domains[0].sans=*.aws.lib.msu.edu\"" \
    docker-compose.yml;
    ./yq -i \
    ".x-solr-deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-msul-solr-router.tls.certresolver=msul-letsencrypt-dns\"" \
    docker-compose.solr-cloud.yml;
    ./yq -i \
    ".x-solr-deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-msul-solr-router.tls.domains[0].main=aws.lib.msu.edu\"" \
    docker-compose.solr-cloud.yml;
    ./yq -i \
    ".x-solr-deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-msul-solr-router.tls.domains[0].sans=*.aws.lib.msu.edu\"" \
    docker-compose.solr-cloud.yml;

    # Remove the cron service if the stack name is NOT catalog-beta
    ./yq -i "del(.services.cron)" docker-compose.yml;

    # Unset parallelism limit for non-production to speed up redeployments on devel stacks
    ./yq -i "del(.services.catalog.deploy.update_config.parallelism)" docker-compose.yml;

    # Add host router rules
    ./yq -i \
    ".services.mail.deploy.labels += \"traefik.http.routers.${STACK_NAME}-http-mail.rule=Host(\`${STACK_NAME}.aws.lib.msu.edu\`) && PathPrefix(\`/mail\`)\"" \
    docker-compose.yml;
    ./yq -i \
    ".services.mail.deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-mail.rule=Host(\`${STACK_NAME}.aws.lib.msu.edu\`) && PathPrefix(\`/mail\`)\"" \
    docker-compose.yml;
    ./yq -i \
    ".x-solr-deploy.labels += \"traefik.http.routers.${STACK_NAME}-msul-solr-router.rule=Host(\`${STACK_NAME}.aws.lib.msu.edu\`) && PathPrefix(\`/solr\`)\"" \
    docker-compose.solr-cloud.yml;
    ./yq -i \
    ".x-solr-deploy.labels +=\"traefik.http.routers.${STACK_NAME}-https-msul-solr-router.rule=Host(\`${STACK_NAME}.aws.lib.msu.edu\`) && PathPrefix(\`/solr\`)\"" \
    docker-compose.solr-cloud.yml;
    ./yq -i \
    ".services.monitoring.deploy.labels += \"traefik.http.routers.${STACK_NAME}-monitor-http-router.rule=Host(\`${STACK_NAME}.aws.lib.msu.edu\`) && PathPrefix(\`/monitoring\`)\"" \
    docker-compose.monitoring.yml;
    ./yq -i \
    ".services.monitoring.deploy.labels += \"traefik.http.routers.${STACK_NAME}-monitor-https-router.rule=Host(\`${STACK_NAME}.aws.lib.msu.edu\`) && PathPrefix(\`/monitoring\`)\"" \
    docker-compose.monitoring.yml;

    # Disable container rollback
    ./yq -i "del(.services.monitoring.deploy.update_config.failure_action)" docker-compose.monitoring.yml;
    ./yq -i "del(.x-solr-deploy.update_config.failure_action)" docker-compose.solr-cloud-bootstrap.yml;
    ./yq -i "del(.services.zk.deploy.update_config.failure_action)" docker-compose.solr-cloud-bootstrap.yml;
    ./yq -i "del(.x-solr-deploy.update_config.failure_action)" docker-compose.solr-cloud.yml;
    ./yq -i "del(.services.zk.deploy.update_config.failure_action)" docker-compose.solr-cloud.yml;
    ./yq -i "del(.services.galera.deploy.update_config.failure_action)" docker-compose.mariadb-cloud.yml;
    ./yq -i "del(.services.galera.deploy.update_config.failure_action)" docker-compose.mariadb-cloud-force.yml;
    ./yq -i "del(.services.galera.deploy.update_config.failure_action)" docker-compose.mariadb-cloud-bootstrap.yml;
    ./yq -i "del(.services.cron.deploy.update_config.failure_action)" docker-compose.solr-cloud.yml;
    ./yq -i "del(.services.catalog.deploy.update_config.failure_action)" docker-compose.yml;
    ./yq -i "del(.services.cachecron.deploy.update_config.failure_action)" docker-compose.yml;
    ./yq -i "del(.services.cron.deploy.update_config.failure_action)" docker-compose.yml;
}

apply_prod_changes() {
    ## Apply to both catalog-beta and catalog-prod ##
    # Use httpchallenge cert resolver (instead of dnschallenge)
    ./yq -i \
    ".services.catalog.deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-router.tls.certresolver=msul-letsencrypt\"" \
    docker-compose.yml;
    ./yq -i \
    ".x-solr-deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-msul-solr-router.tls.certresolver=msul-letsencrypt\"" \
    docker-compose.solr-cloud.yml;

    # Remove the cachecron service if the stack name is production
    ./yq -i "del(.services.cachecron)" docker-compose.yml;

    # Remove mailcatcher service
    ./yq -i "del(.services.mail)" docker-compose.yml;

    ## Changes for catalog-beta
    if [ "${STACK_NAME}" == "catalog-beta" ]; then
        # Override default router rule
        ./yq -i \
        ".services.catalog.deploy.labels += \"traefik.http.routers.${STACK_NAME}-http-router.rule=Host(\`${STACK_NAME}.lib.msu.edu\`)\"" \
        docker-compose.yml;
        ./yq -i \
        ".services.catalog.deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-router.rule=Host(\`${STACK_NAME}.lib.msu.edu\`)\"" \
        docker-compose.yml;
        ./yq -i \
        ".x-solr-deploy.labels += \"traefik.http.routers.${STACK_NAME}-msul-solr-router.rule=Host(\`${STACK_NAME}.lib.msu.edu\`) && PathPrefix(\`/solr\`)\"" \
        docker-compose.solr-cloud.yml;
        ./yq -i \
        ".x-solr-deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-msul-solr-router.rule=Host(\`${STACK_NAME}.lib.msu.edu\`) && PathPrefix(\`/solr\`)\"" \
        docker-compose.solr-cloud.yml;
        ./yq -i \
        ".services.monitoring.deploy.labels += \"traefik.http.routers.${STACK_NAME}-monitor-http-router.rule=Host(\`${STACK_NAME}.lib.msu.edu\`) && PathPrefix(\`/monitoring\`)\"" \
        docker-compose.monitoring.yml;
        ./yq -i \
        ".services.monitoring.deploy.labels += \"traefik.http.routers.${STACK_NAME}-monitor-https-router.rule=Host(\`${STACK_NAME}.lib.msu.edu\`) && PathPrefix(\`/monitoring\`)\"" \
        docker-compose.monitoring.yml;
    fi

    ## Changes for catalog-prod
    # TODO add catalog.lib at launch
    if [ "${STACK_NAME}" == "catalog-prod" ]; then
        ./yq -i \
        ".services.catalog.deploy.labels += \"traefik.http.routers.${STACK_NAME}-http-router.rule=Host(\`${STACK_NAME}.lib.msu.edu\`)\"" \
        docker-compose.yml;
        ./yq -i \
        ".services.catalog.deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-router.rule=Host(\`${STACK_NAME}.lib.msu.edu\`)\"" \
        docker-compose.yml;
        ./yq -i \
        ".x-solr-deploy.labels += \"traefik.http.routers.${STACK_NAME}-msul-solr-router.rule=Host(\`${STACK_NAME}.lib.msu.edu\`) && PathPrefix(\`/solr\`)\"" \
        docker-compose.solr-cloud.yml;
        ./yq -i \
        ".x-solr-deploy.labels += \"traefik.http.routers.${STACK_NAME}-https-msul-solr-router.rule=Host(\`${STACK_NAME}.lib.msu.edu\`) && PathPrefix(\`/solr\`)\"" \
        docker-compose.solr-cloud.yml;
        ./yq -i \
        ".services.monitoring.deploy.labels += \"traefik.http.routers.${STACK_NAME}-monitor-http-router.rule=Host(\`catalog-prod.lib.msu.edu\`,\`catalog.lib.msu.edu\`) && PathPrefix(\`/monitoring\`)\"" \
        docker-compose.monitoring.yml;
        ./yq -i \
        ".services.monitoring.deploy.labels += \"traefik.http.routers.${STACK_NAME}-monitor-https-router.rule=Host(\`catalog-prod.lib.msu.edu\`,\`catalog.lib.msu.edu\`) && PathPrefix(\`/monitoring\`)\"" \
        docker-compose.monitoring.yml;
    fi
}

main() {
    # Install yq, enbsubst, and sponge
    apk add wget gettext moreutils;
    wget --header="Authorization: token ${GITHUB_USER_TOKEN}" \
    "https://github.com/mikefarah/yq/releases/download/v4.26.1/yq_linux_amd64" -O ./yq;
    chmod +x ./yq;

    # Development environment changes
    if [[ "${STACK_NAME}" != catalog-* ]]; then
        apply_devel_changes;
    fi
    # Production environment changes
    if [[ "${STACK_NAME}" == catalog-* ]]; then
        apply_prod_changes;
    fi

    # Authentication environment changes
    if [[ "${STACK_NAME}" == catalog-* ]] || [ "${STACK_NAME}" == "devel-authentication" ]; then
      ./yq -i ".services.catalog.volumes += \"/home/deploy/samlcerts/${STACK_NAME}:/mnt/samlcerts:ro\"" docker-compose.yml;
    fi

    # Replace variables in all compose files
    envsubst < docker-compose.yml | sponge docker-compose.yml;
    envsubst < docker-compose.solr-cloud.yml | sponge docker-compose.solr-cloud.yml;
    envsubst < docker-compose.solr-cloud-bootstrap.yml | sponge docker-compose.solr-cloud-bootstrap.yml;
    envsubst < docker-compose.mariadb-cloud-bootstrap.yml | sponge docker-compose.mariadb-cloud-bootstrap.yml;
    envsubst < docker-compose.mariadb-cloud-force.yml | sponge docker-compose.mariadb-cloud-force.yml;
    envsubst < docker-compose.mariadb-cloud.yml | sponge docker-compose.mariadb-cloud.yml;
    envsubst < docker-compose.internal.yml | sponge docker-compose.internal.yml;
    envsubst < docker-compose.traefik.yml | sponge docker-compose.traefik.yml;
    envsubst < docker-compose.monitoring.yml | sponge docker-compose.monitoring.yml;

    # Remove blank lines as a workaround for issue caused by: https://github.com/mikefarah/yq/issues/1191
    sed -i "/^$/d" docker-compose.traefik.yml;
    sed -i "/^$/d" docker-compose.internal.yml;
    sed -i "/^$/d" docker-compose.yml;

    # Copy the updated compose files to the server
    ssh deploy@"${DEPLOY_HOST_A}" mkdir -p "${COMPOSE_PATH}";
    scp docker-compose* deploy@"${DEPLOY_HOST_A}":"${COMPOSE_PATH}"/;
    echo "Copying files to ${COMPOSE_PATH}"
}

beforescript
main
