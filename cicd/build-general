#!/bin/bash

runhelp() {
    echo ""
    echo "Purpose: General component build template"
    echo ""
    echo "Expected User-defined Variables:"
    echo "  - LATEST: Image tag for the latest image to use as cache"
    echo "  - CURR: Image tag for current image"
    echo "  - COMPONENT: Component name (context for the build)"
    echo "  - VUFIND_VERSION: The current version of Vufind"
    echo ""
    echo "Failure Scenarios:"
    echo "  - If the build fails"
    echo "  - If the push fails"
    echo ""
}

if [[ -n "$1" || $1 == "-h" || $1 == "--help" || $1 == "help" ]]; then
    runhelp
    exit 0
fi

main() {
    # Get the number of attempts for this job
    apk add jq curl || apt install -y jq curl;
    ATTEMPTS=$(curl -s --header "PRIVATE-TOKEN: ${RO_CICD_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs?include_retried=true" | jq "[.[] | select(.name == \"${CI_JOB_NAME}\")] | length")
    echo "${CI_JOB_NAME// /_}_JobAttempts" "${ATTEMPTS}" >> metrics.txt

    # Determine job start time; used to calculate runtime metrics
    START=$(date +%s)

    echo "Pulling image to use as cache"
    docker pull "${LATEST}" || true;

    echo "Building image"
    docker build \
    --tag "${CURR}" \
    --build-arg VUFIND_VERSION="${VUFIND_VERSION}" \
    --cache-from "${LATEST}" \
    "${COMPONENT}"/;

    EC=$?;
    if [[ ${EC} -ne 0 ]]; then
        echo "Failed to build ${COMPONENT}. Sleeping to add delay before potential retry.";
        sleep 3;
        exit 1;
    fi;

    echo "Pushing image"
    docker push "${CURR}";

    EC=$?;
    if [[ ${EC} -ne 0 ]]; then
        echo "Failed to push ${COMPONENT}. Sleeping to add delay before potential retry.";
        sleep 3;
        exit 1;
    fi;

    if [[ ${CI_DEFAULT_BRANCH} == "${CI_COMMIT_BRANCH}" || ${CI_COMMIT_BRANCH} == "catalog-preview" ]]; then
        echo "Pushing new unique main image tag"
        docker tag "${CURR}" "${CURR}-main";
        docker push "${CURR}-main";
        echo "Pushing new image with :latest tag"
        docker tag "${CURR}" "${LATEST}";
        docker push "${LATEST}";
    fi;

    EC=$?;
    if [[ ${EC} -ne 0 ]]; then
        echo "Failed to add latest tag for ${COMPONENT}. Sleeping to add delay before potential retry.";
        sleep 3;
        exit 1;
    fi;

    # Get runtime metrics
    END=$(date +%s); RUNTIME=$((END-START)); HOURS=$((RUNTIME / 3600)); MINUTES=$(( (RUNTIME % 3600) / 60 )); SECONDS=$(( (RUNTIME % 3600) % 60 ));
    echo "${CI_JOB_NAME// /_}_Runtime" $HOURS:$MINUTES:$SECONDS >> metrics.txt
}

# exit script if any command fails
set -e;
# set xtrace to show commands being run in the CI job logs
set -o xtrace
main;
