#!/bin/bash

source "${CI_PROJECT_DIR}"/cicd/before-script

runhelp() {
    echo ""
    echo "Purpose: Prepopulate development and review environments with data"
    echo ""
    echo "Expected User-defined Variables:"
    echo "  - STACK_NAME: Name of the stack"
    echo "  - DEPLOY_HOST_1: The first host in the cluster"
    echo "  - DEPLOY_HOST_2: The second host in the cluster"
    echo "  - DEPLOY_HOST_3: The third host in the cluster"
    echo ""
    echo "Failure Scenarios:"
    echo "  - The catalog container is not online on the node"
    echo "  - The Solr container is not online on the node"
    echo "  - The import scripts fail for any reason"
    echo ""
}

if [[ -n "$1" || $1 == "-h" || $1 == "--help" || $1 == "help" ]]; then
    runhelp
    exit 0
fi

main() {
    # Determine if records are already loaded
    # TODO refacto sed command into pc-common
    CATALOG_NODE=$(run_on_node 1 "docker service ps -f 'desired-state=running' --format '{{ .Node }}' ${STACK_NAME}-catalog_catalog" | sed -re "s/\w*-([1-3]).*/\1/") || echo "";
    CATALOG_CONTAINER=$(run_on_node "${CATALOG_NODE}" "docker ps -q -f name=${STACK_NAME}-catalog_catalog") || echo "";
    S_CONTAINER_A=$(run_on_node 1 "docker ps -q -f name=${STACK_NAME}-solr_cron") || echo "";
    S_CONTAINER_B=$(run_on_node 2 "docker ps -q -f name=${STACK_NAME}-solr_cron") || echo "";
    S_CONTAINER_C=$(run_on_node 3 "docker ps -q -f name=${STACK_NAME}-solr_cron") || echo "";

    if [ -z "${CATALOG_NODE}" ] || [ -z "${CATALOG_CONTAINER}" ] ; then
        echo "Could not find container for ${STACK_NAME}-catalog_catalog. Node: ${CATALOG_NODE}. Container: ${CATALOG_CONTAINER}";
        exit 1;
    fi;

    if [ -z "${S_CONTAINER_A}" ] || [ -z "${S_CONTAINER_B}" ] || [ -z "${S_CONTAINER_C}" ] ; then
        echo "Could not find container for ${STACK_NAME}-solr_cron on all 3 nodes";
        exit 1;
    fi;

    STAT_CD=$(run_on_node 1 "docker exec ${S_CONTAINER_A} curl 'http://solr:8983/solr/biblio/select?indent=true&q.op=OR&q=*%3A*&rows=0' --write-out %{http_code} --silent --output /dev/null") || echo "-1";

    if [[ "${STAT_CD}" -ne 200 ]]; then
        echo "Failed to get number of records from Solr. Curl returned ${STAT_CD}. Sleeping for 5 seconds to add delay before retry.";
        sleep 5;
        exit 1;
    fi;

    NUM_RECS=$(run_on_node 1 "docker exec ${S_CONTAINER_A} curl -s 'http://solr:8983/solr/biblio/select?indent=true&q.op=OR&q=*%3A*&rows=0' | jq '.response.numFound'") ||  echo "-1";

    if [[ "${NUM_RECS}" -eq "0" ]]; then
        # Load some records
        echo "Running Folio import now (pc-import-folio)";
        run_on_node "${CATALOG_NODE}" "docker exec ${CATALOG_CONTAINER} /usr/local/bin/pc-import-folio -c /mnt/shared/oai/devel-batch -l 1 -b -r >/dev/null 2>&1";
        echo "Import completed with exit code $?";
        echo "Running HLM import now (pc-import-hlm)";
        run_on_node "${CATALOG_NODE}" "docker exec ${CATALOG_CONTAINER} /usr/local/bin/pc-import-hlm -l 1 -c -i -s /mnt/shared/hlm/devel-batch >/dev/null 2>&1";
        echo "Import completed with exit code $?";
        # Rebuild alphabetic browse databases
        echo "Running Alphabetic browse database build";
        run_on_node 1 "docker exec ${S_CONTAINER_A} /alpha-browse.sh -v -p /mnt/shared/alpha-browse/${STACK_NAME}";
        run_on_node 2 "docker exec ${S_CONTAINER_B} /alpha-browse.sh -v -p /mnt/shared/alpha-browse/${STACK_NAME}";
        run_on_node 3 "docker exec ${S_CONTAINER_C} /alpha-browse.sh -v -p /mnt/shared/alpha-browse/${STACK_NAME}";
        echo "Completed alphabetic browse database build";
    else
        echo "${NUM_RECS} loaded records already exist. Doing nothing.";
    fi;
}

before_script
main
