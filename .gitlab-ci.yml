# TODO 
# - change how we do deploy so it doesn't involve downtime during deploy (using scale vs update)
#   maybe we should replace :latest in compoase file with commit sha and create those tags?
# - how to handle bootstrap steps
stages:
  - Build
  - Deploy
  - Tag
  - Release

variables:
  DEPLOY_HOST: catalog-a.aws.lib.msu.edu
  COMPOSE_PATH: /home/deploy/

Build DB Image:
  variables:
     COMPONENT: db
  extends: .build_template

Build Solr Image:
  variables:
     COMPONENT: solr
  extends: .build_template

Build Internal Traefik Image:
  variables:
     COMPONENT: traefik-internal
  extends: .build_template

Build Vufind Image:
  stage: Build
  tags:
    - msul-docker
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
      changes:
        - vufind/*
  variables:
    LATEST: registry.gitlab.msu.edu/msu-libraries/devops/catalog/vufind:latest
    CURR: registry.gitlab.msu.edu/msu-libraries/devops/catalog/vufind:$CI_COMMIT_SHORT_SHA
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $LATEST || true
    - > 
        docker build 
        --build-arg DEBUG=false 
        --build-arg FOLIO_URL=$FOLIO_URL 
        --build-arg FOLIO_USER=$FOLIO_USER 
        --build-arg FOLIO_PASS=$FOLIO_PASS 
        --build-arg FOLIO_TENANT=$FOLIO_TENANT 
        --build-arg FOLIO_REC_ID=$FOLIO_REC_ID 
        --build-arg FOLIO_CANCEL_ID=$FOLIO_CANCEL_ID 
        --build-arg OAI_URL=$OAI_URL 
        --build-arg EMAIL=$EMAIL 
        --build-arg MAIL_HOST=localhost 
        --build-arg MAIL_PORT=25 
        --build-arg MAIL_USERNAME= 
        --build-arg MAIL_PASSWORD= 
        --build-arg SOLR_URL=http://solr:8983/solr 
        --tag $LATEST 
        --tag $CURR 
        --cache-from $LATEST 
        vufind/
    - docker push $LATEST
    - docker push $CURR

Deploy Compose Files:
  stage: Build
  extends: .setup_ssh_template
  tags:
    - msul-docker
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
  script:
    # Copy all of the docker-compose files to the server
    - scp docker-compose* deploy@$DEPLOY_HOST:$COMPOSE_PATH

Deploy Internal Traefik:
  stage: Deploy
  extends: .setup_ssh_template
  tags:
    - msul-docker
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
      changes:
        - docker-compose.traefik-internal.yml
        - traefik-internal/*
  needs:
    - Build Internal Traefik Image
    - Deploy Compose Files
  script:
    - >
      ssh deploy@$DEPLOY_HOST
      "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY;
      docker stack deploy --with-registry-auth -c $COMPOSE_PATH/docker-compose.traefik-internal.yml traefik-internal;
      docker service update --image registry.gitlab.msu.edu/msu-libraries/devops/catalog/traefik-internal:latest traefik-internal;"

Deploy Public Traefik:
  stage: Deploy
  extends: .setup_ssh_template
  tags:
    - msul-docker
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
      changes:
        - docker-compose.traefik-public.yml
  needs:
    - Deploy Compose Files
  script:
    - >
      ssh deploy@$DEPLOY_HOST
      "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY;
      docker stack deploy -c $COMPOSE_PATH/docker-compose.traefik-public.yml traefik-public;"

Deploy Solr:
  stage: Deploy
  extends: .setup_ssh_template
  tags:
    - msul-docker
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
      changes:
        - docker-compose.solr*
        - solr/*
  needs:
    - Build Solr Image
    - Deploy Compose Files
  script:
    - >
      ssh deploy@$DEPLOY_HOST
      "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY;
      docker stack deploy --with-registry-auth -c $COMPOSE_PATH/docker-compose.solr-cloud.yml solr;
      docker service update --image registry.gitlab.msu.edu/msu-libraries/devops/catalog/solr:latest solr_solr"

Deploy Vufind:
  stage: Deploy
  extends: .setup_ssh_template
  tags:
    - msul-docker
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
      changes:
        - docker-compose.yml
        - vufind/*
  needs:
    - Build Vufind Image
    - Deploy Compose Files
  script:
    - >
      ssh deploy@$DEPLOY_HOST
      "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY;
      docker stack deploy --with-registry-auth -c $COMPOSE_PATH/docker-compose.yml catalog;
      docker service update --image registry.gitlab.msu.edu/msu-libraries/devops/catalog/vufind:latest catalog_catalog"

Deploy Database:
  stage: Deploy
  extends: .setup_ssh_template
  tags:
    - msul-docker
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
      changes:
        - docker-compose.mariadb*
  needs:
    - Build DB Image
    - Deploy Compose Files
  script:
    - >
      ssh deploy@$DEPLOY_HOST
      "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY;
      docker stack deploy --with-registry-auth -c $COMPOSE_PATH/docker-compose.mariadb-galera1.yml mariadb;
      docker stack deploy --with-registry-auth -c $COMPOSE_PATH/docker-compose.mariadb-galera2.yml mariadb;
      docker stack deploy --with-registry-auth -c $COMPOSE_PATH/docker-compose.mariadb-galera3.yml mariadb;
      docker service update --image registry.gitlab.msu.edu/msu-libraries/devops/catalog/db:latest mariadb_galera1; sleep 5;
      docker service update --image registry.gitlab.msu.edu/msu-libraries/devops/catalog/db:latest mariadb_galera2; sleep 5;
      docker service update --image registry.gitlab.msu.edu/msu-libraries/devops/catalog/db:latest mariadb_galera3; sleep 5;"

.setup_ssh_template:
  before_script:
    # Setup SSH access to one of the servers
    - eval $( ssh-agent -s )
    - echo "$DEPLOY_PRIVATE_KEY" | base64 -d | ssh-add -
    - install -d -m 700 ~/.ssh/
    - ( umask 022; touch ~/.ssh/known_hosts )
    - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts

.build_template:
  stage: Build
  tags:
    - msul-shared
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
      changes:
        - $COMPONENT/*
        - docker-compose.*$COMPOENT*
  variables:
    LATEST: registry.gitlab.msu.edu/msu-libraries/devops/catalog/$COMPONENT:latest
    CURR: registry.gitlab.msu.edu/msu-libraries/devops/catalog/$COMPONENT:$CI_COMMIT_SHORT_SHA
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $LATEST || true
    - > 
        docker build 
        --tag $LATEST 
        --tag $CURR 
        --cache-from $LATEST 
        $COMPONENT/
    - docker push $LATEST
    - docker push $CURR

#Tag Release:
#  stage: Tag
#  tags:
#    - msul-docker
#  rules:
#    - if: '$CI_COMMIT_TAG'
#      when: never
#    - if: '$CI_COMMIT_REF_NAME == "master"'
#  script:
#    - rm -rf clone/ || true
#    - git clone https://gitlab-ci-token:$RW_CICD_TOKEN@gitlab.msu.edu/msu-libraries/devops/catalog.git clone/
#    - cd clone/ # doing this to avoid runner cache
#    - major_ver=$(date +'%y.%-m')
#    - latest_patch=$(git tag -l $major_ver* --sort=-v:refname | head -n 1 | cut -d'.' -f 3)
#    - "[ -z $latest_patch ] && cur_patch=-1 || cur_patch=$latest_patch"
#    - patch_ver=$(($cur_patch+1))
#    - TAG=$major_ver.$patch_ver
#    - echo "TAG=$TAG" > ../variables.env
#    - echo "Tagging new release with $TAG"
#    - git tag $TAG
#    - git push origin --tags
#  artifacts:
#    reports:
#      dotenv: variables.env
#
#GitHub Release:
#  stage: Release
#  tags:
#    - msul-docker
#  when: manual
#  rules:
#    - if: '$CI_COMMIT_TAG'
#      when: never
#    - if: '$CI_COMMIT_REF_NAME == "master"'
#  needs:
#    - job: Tag Release
#      artifacts: true
#  script:
#    - rm -rf catalog.git
#    - git clone --mirror git@gitlab.msu.edu:msu-libraries/devops/catalog.git
#    - cd catalog.git
#    - git push --force --mirror git@github.com:MSU-Libraries/catalog.git
#    - echo "{\"tag_name\":\"${TAG}\", \"target_commitish\":\"${CI_COMMIT_SHA}\"}" > data.json
#    - "curl -X POST -H 'Accept: application/vnd.github.v3+json' -u $GITHUB_USER_TOKEN https://api.github.com/repos/MSU-Libraries/catalog/releases -d '@data.json'"
