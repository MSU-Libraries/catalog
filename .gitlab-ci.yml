stages:
  - Build
  - test
  - Traefik
  - Bootstrap
  - Deploy
  - Tag
  - Release

variables:
  DEPLOY_HOST: catalog-a.aws.lib.msu.edu
  COMPOSE_PATH: /home/deploy/

Deploy Compose Files:
  stage: Build
  extends: .setup_ssh_template
  tags:
    - msul-docker
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
  script:
    - scp docker-compose* deploy@$DEPLOY_HOST:$COMPOSE_PATH

Deploy Internal Traefik:
  stage: Traefik
  extends: .setup_ssh_template
  tags:
    - msul-docker
  rules:
    # Always deploy traefik
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
  needs:
    - Build Internal Traefik Image
    - Deploy Compose Files
  script:
    - >
      ssh deploy@$DEPLOY_HOST
      "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY;
      docker stack deploy --with-registry-auth -c $COMPOSE_PATH/docker-compose.traefik-internal.yml traefik-internal;"

Deploy Public Traefik:
  stage: Traefik
  extends: .setup_ssh_template
  tags:
    - msul-docker
  rules:
    # Always deploy traefik
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
  needs:
    - Deploy Compose Files
  script:
    - >
      ssh deploy@$DEPLOY_HOST
      "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY;
      docker stack deploy -c $COMPOSE_PATH/docker-compose.traefik-public.yml traefik-public;"

Bootstrap Stacks:
  stage: Bootstrap
  extends: .setup_ssh_template
  tags:
    - msul-docker
  rules:
    # Always check if bootstrapping is needed
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
  needs:
    - Deploy Compose Files
    - Deploy Internal Traefik
    - Build DB Image
    - Build Solr Image
  script:
    - >
      ssh deploy@$DEPLOY_HOST
      "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY;
      docker stack ps mariadb || (docker stack deploy --with-registry-auth -c $COMPOSE_PATH/docker-compose.mariadb-bootstrap.yml mariadb && sleep 30);
      docker stack ps solr || docker stack deploy --with-registry-auth -c $COMPOSE_PATH/docker-compose.solr-cloud-bootstrap.yml solr"

Deploy Solr:
  stage: Deploy
  extends: .setup_ssh_template
  tags:
    - msul-docker
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
      changes:
        - docker-compose.solr*
        - solr/*
        - docker-compose.yml
        - vufind/*
        - zk/*
  needs:
    - Build Solr Image
    - Build ZK Image
    - Bootstrap Stacks
    - Deploy Compose Files
    - Deploy Internal Traefik
  script:
    - >
      ssh deploy@$DEPLOY_HOST
      "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY;
      docker stack deploy --with-registry-auth -c $COMPOSE_PATH/docker-compose.solr-cloud.yml solr"

Deploy DB:
  stage: Deploy
  extends: .setup_ssh_template
  tags:
    - msul-docker
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
      changes:
        - docker-compose.mariadb*
        - docker-compose.yml
        - vufind/*
        - docker-compose.solr*
        - solr/*
        - zk/*
  needs:
    - Build DB Image
    - Bootstrap Stacks
    - Deploy Compose Files
    - Deploy Internal Traefik
  script:
    - >
      ssh deploy@$DEPLOY_HOST
      "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY;
      docker stack deploy --with-registry-auth -c $COMPOSE_PATH/docker-compose.mariadb-galera2.yml mariadb; sleep 30;
      docker stack deploy --with-registry-auth -c $COMPOSE_PATH/docker-compose.mariadb-galera3.yml mariadb; sleep 30;
      docker stack deploy --with-registry-auth -c $COMPOSE_PATH/docker-compose.mariadb-galera1.yml mariadb"

Deploy Vufind:
  stage: Deploy
  extends: .setup_ssh_template
  tags:
    - msul-docker
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
      changes:
        - docker-compose.yml
        - vufind/*
        - docker-compose.solr*
        - solr/*
        - zk/*
  needs:
    - Deploy Public Traefik
    - Deploy Internal Traefik
    - Build Vufind Image
    - Deploy DB
    - Deploy Solr
    - Deploy Compose Files
  script:
    - >
      ssh deploy@$DEPLOY_HOST
      "docker login -u cicd -p $REGISTRY_ACCESS_TOKEN $CI_REGISTRY;
      docker stack deploy --with-registry-auth -c $COMPOSE_PATH/docker-compose.yml catalog"

############# Templates ###############

.setup_ssh_template:
  before_script:
    # Setup SSH access to one of the servers
    - eval $( ssh-agent -s )
    - echo "$DEPLOY_PRIVATE_KEY" | base64 -d | ssh-add -
    - install -d -m 700 ~/.ssh/
    - ( umask 022; touch ~/.ssh/known_hosts )
    - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts


Tag Release:
  stage: Tag
  tags:
    - msul-docker
  rules:
    - if: '$CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE != "schedule"'
      when: manual
  before_script:
    - apk add git
  script:
    - rm -rf clone/ || true
    - git clone https://gitlab-ci-token:$RW_CICD_TOKEN@gitlab.msu.edu/msu-libraries/devops/catalog.git clone/
    - cd clone/ # doing this to avoid runner cache
    - major_ver=$(date +'%y.%-m')
    - latest_patch=$(git tag -l $major_ver* --sort=-v:refname | head -n 1 | cut -d'.' -f 3)
    - "[ -z $latest_patch ] && cur_patch=-1 || cur_patch=$latest_patch"
    - patch_ver=$(($cur_patch+1))
    - TAG=$major_ver.$patch_ver
    - echo "TAG=$TAG" > ../variables.env
    - echo "Tagging new release with $TAG"
    - git tag $TAG
    - git push origin --tags
  artifacts:
    reports:
      dotenv: variables.env

GitHub Release:
  stage: Release
  tags:
    - msul-docker
  rules:
    - if: '$CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE != "schedule"'
      when: manual
  needs:
    - job: Tag Release
      artifacts: true
  before_script:
    - apk add git curl
  script:
    - rm -rf catalog.git
    - git clone --mirror https://RW_CICD_TOKEN:glpat-wZpCt5UQ4NFnHBvzyn7r@gitlab.msu.edu/msu-libraries/devops/catalog.git
    - cd catalog.git
    - git push --force --mirror https://$GITHUB_USER_TOKEN@github.com/MSU-Libraries/catalog.git
    - echo "{\"tag_name\":\"${TAG}\", \"target_commitish\":\"${CI_COMMIT_SHA}\"}" > data.json
    - "curl -X POST -H 'Accept: application/vnd.github.v3+json' -u $GITHUB_USER_TOKEN https://api.github.com/repos/MSU-Libraries/catalog/releases -d '@data.json'"


include:
  - '.gitlab-ci-build-scan.yml'
