############# Scan ###############
# https://docs.gitlab.com/ee/user/application_security/container_scanning/

secret_detection:
  interruptible: true
  environment:
    name: $CI_COMMIT_BRANCH/secret-scan
    auto_stop_in: 2 weeks
  tags:
    - msul-shared

# Does not have the environment tag due to this being run on merge requests
# and the $CI_COMMIT_BRANCH variable may not exist yet and could cause this error:
# "This job could not be executed because it would create an environment with an invalid parameter."
# See: https://gitlab.msu.edu/help/ci/environments/index#a-deployment-job-failed-with-this-job-could-not-be-executed-because-it-would-create-an-environment-with-an-invalid-parameter-error
Shellcheck CI:
  stage: test
  image: alpine:latest
  timeout: 5m
  tags:
    - msul-shared
  interruptible: true
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never 
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
  before_script:
    - apk add shellcheck || apt install shellcheck
  script:
    - SHELLCHECK_OPTS="--exclude SC2029,SC1091" shellcheck cicd/*

Shellcheck:
  stage: test
  image: alpine:latest
  timeout: 5m
  tags:
    - msul-shared
  interruptible: true
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never 
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
  before_script:
    - apk add shellcheck || apt install shellcheck
  script:
    # TODO eventually have this fail the job, but for now it's informational
    - shellcheck $(find . -name "*.sh") || exit 0

Validate Vufind Build:
  stage: test
  variables:
    LATEST: $CI_REGISTRY_IMAGE/vufind:latest
  timeout: 15m
  tags:
    - msul-shared
  interruptible: true
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never 
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
  before_script:
    - apk add --no-cache bash
  script:
    - bash ./cicd/validate-vufind-build

Load Performance:
  stage: Optional Steps
  interruptible: true
  timeout: 5m
  tags:
    - msul-shared
  environment:
    name: $CI_COMMIT_BRANCH/load-testing
    auto_stop_in: 2 weeks
  needs:
    - job: Deploy Vufind
      artifacts: true
    - Populate Vufind Environment
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_DEPLOY_FREEZE == null && $CI_PIPELINE_SOURCE != "schedule"'
    - if: '$CI_COMMIT_BRANCH =~ /^devel-/ || $CI_COMMIT_BRANCH =~ /^review-/ ||  $CI_COMMIT_BRANCH == "catalog-preview"'
  before_script:
    - mkdir results
    - chmod 777 results
    - mkdir tests
    - cp vufind/tests/load_test.js tests/
    - chmod -R 777 tests
    - ls -l $(pwd)/tests
  script:
    - docker run --rm -v $(pwd)/results:/results -v $(pwd)/tests:/tests grafana/k6 run -u 10 -d 30s /tests/load_test.js --env URL="https://$URL" --summary-export=/results/load-performance.json
    - ls -l results
  artifacts:
    reports:
      load_performance: results/load-performance.json



# Commenting this out since the https://docs.gitlab.com/ee/user/application_security/container_scanning/#vulnerability-allowlisting
# wasn't being respecting in attempts at storing it at top level or at vufind level
#container_scanning:
#  needs:
#    - Build Vufind Image
#  variables:
#    DOCKER_IMAGE: registry.gitlab.msu.edu/msu-libraries/devops/catalog/vufind:$CI_COMMIT_SHORT_SHA
#    GIT_STRATEGY: fetch
#    SECURE_LOG_LEVEL: warn
#    DOCKERFILE_PATH: vufind/Dockerfile

# Commenting out the scanning stage for now since the Bitnami images trigger a lot of results.
# We'll add this back in when we have time to sift through all of them.
#
#Scan Solr Image:
#  extends: .scan_template
#  needs:
#    - Build Solr Image
#  variables:
#    COMPONENT: solr
#
#Scan DB Image:
#  extends: .scan_template
#  needs:
#    - Build DB Image
#  variables:
#    COMPONENT: db
#
#Scan ZK Image:
#  extends: .scan_template
#  needs:
#    - Build ZK Image
#  variables:
#    COMPONENT: zk
#
#Scan Internal Traefik Image:
#  extends: .scan_template
#  needs:
#    - Build Internal Traefik Image
#  variables:
#    COMPONENT: traefik-internal

############# Templates ###############

#.scan_template:
#  extends: container_scanning
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
#  variables:
#    DOCKER_IMAGE: registry.gitlab.msu.edu/msu-libraries/devops/catalog/$COMPONENT:latest
#    GIT_STRATEGY: fetch
#    DOCKERFILE_PATH: $COMPONENT/Dockerfile

include:
#  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
