############# Scan ###############
# https://docs.gitlab.com/ee/user/application_security/container_scanning/

secret_detection:
  interruptible: true
  environment:
    name: $CI_COMMIT_BRANCH/secret-scan
    auto_stop_in: 2 weeks
  tags:
    - msul-shared

gemnasium-python-dependency_scanning:
  interruptible: true
  variables:
    DS_MAX_DEPTH: -1
    SECURE_LOG_LEVEL: debug
  environment:
    name: $CI_COMMIT_BRANCH/dependency-scan
    auto_stop_in: 2 weeks
  tags:
    - msul-shared
  script:
    # Overriding to allow mariadb pip package install to work for analyzer
    - apt update
    - apt install -y libmariadb-dev
    - /analyzer run

# Does not have the environment tag due to this being run on merge requests
# and the $CI_COMMIT_BRANCH variable may not exist yet and could cause this error:
# "This job could not be executed because it would create an environment with an invalid parameter."
# See: https://gitlab.msu.edu/help/ci/environments/index#a-deployment-job-failed-with-this-job-could-not-be-executed-because-it-would-create-an-environment-with-an-invalid-parameter-error
markdownlint-cli2:
  stage: test
  interruptible: true
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
  tags:
    - msul-shared
  image: registry.gitlab.com/pipeline-components/markdownlint-cli2:latest
  script:
    - markdownlint-cli2 "**/**.md"

# Does not have the environment tag due to this being run on merge requests
# and the $CI_COMMIT_BRANCH variable may not exist yet and could cause this error:
# "This job could not be executed because it would create an environment with an invalid parameter."
# See: https://gitlab.msu.edu/help/ci/environments/index#a-deployment-job-failed-with-this-job-could-not-be-executed-because-it-would-create-an-environment-with-an-invalid-parameter-error
markdown-spellcheck:
  stage: test
  interruptible: true
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
  tags:
    - msul-shared
  image: registry.gitlab.com/pipeline-components/markdown-spellcheck:latest
  script:
    - mdspell --report '**/*.md' --ignore-numbers --ignore-acronyms

# Does not have the environment tag due to this being run on merge requests
# and the $CI_COMMIT_BRANCH variable may not exist yet and could cause this error:
# "This job could not be executed because it would create an environment with an invalid parameter."
# See: https://gitlab.msu.edu/help/ci/environments/index#a-deployment-job-failed-with-this-job-could-not-be-executed-because-it-would-create-an-environment-with-an-invalid-parameter-error
Shellcheck CI:
  stage: test
  image: alpine:latest
  timeout: 5m
  tags:
    - msul-shared
  interruptible: true
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
  before_script:
    - apk add shellcheck || apt install shellcheck
  script:
    - shellcheck cicd/*
  artifacts:
    reports:
      metrics: metrics.txt

Shellcheck:
  stage: test
  image: alpine:latest
  timeout: 5m
  tags:
    - msul-shared
  interruptible: true
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
  before_script:
    - apk add shellcheck || apt install shellcheck
  script:
    - shellcheck $(find . -name '.git' -prune -o \( -name "*.sh" -o -name "pc-*" \) -print)
  artifacts:
    reports:
      metrics: metrics.txt

VuFind Tests:
  stage: Optional Steps
  image: $CI_REGISTRY_IMAGE/vufind:$CI_COMMIT_SHORT_SHA
  allow_failure: true
  tags:
    - msul-shared
  retry: 1
  timeout: 15m
  interruptible: true
  needs:
    - Build Vufind Image
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_DEPLOY_FREEZE == null && $CI_PIPELINE_SOURCE != "schedule"'
    - if: '$CI_COMMIT_BRANCH =~ /^devel-/ || $CI_COMMIT_BRANCH =~ /^review-/ || $CI_COMMIT_BRANCH == "catalog-preview"'
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: manual
  script:
    - bash ./cicd/validate-vufind-build
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'
  artifacts:
    when: always
    expire_in: 30 days
    reports:
      junit: reports/report.xml
      coverage_report:
        coverage_format: cobertura
        path: reports/coverage.xml
      metrics: metrics.txt

Pylint Monitoring:
  stage: Optional Steps
  image: $CI_REGISTRY_IMAGE/monitoring:$CI_COMMIT_SHORT_SHA
  allow_failure: true
  tags:
    - msul-shared
  retry: 1
  timeout: 15m
  interruptible: true
  needs:
    - Build Monitoring Image
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_DEPLOY_FREEZE == null && $CI_PIPELINE_SOURCE != "schedule"'
    - if: '$CI_COMMIT_BRANCH =~ /^devel-/ || $CI_COMMIT_BRANCH =~ /^review-/ || $CI_COMMIT_BRANCH == "catalog-preview"'
  script:
    - pylint --fail-under=10.00 monitoring/app/

# Commenting this out since the https://docs.gitlab.com/ee/user/application_security/container_scanning/#vulnerability-allowlisting
# wasn't being respecting in attempts at storing it at top level or at vufind level
#container_scanning:
#  needs:
#    - Build Vufind Image
#  variables:
#    DOCKER_IMAGE: registry.gitlab.msu.edu/msu-libraries/catalog/catalog/vufind:$CI_COMMIT_SHORT_SHA
#    GIT_STRATEGY: fetch
#    SECURE_LOG_LEVEL: warn
#    DOCKERFILE_PATH: vufind/Dockerfile

# Commenting out the scanning stage for now since the Bitnami images trigger a lot of results.
# We'll add this back in when we have time to sift through all of them.
#
#Scan Solr Image:
#  extends: .scan_template
#  needs:
#    - Build Solr Image
#  variables:
#    COMPONENT: solr
#
#Scan DB Image:
#  extends: .scan_template
#  needs:
#    - Build DB Image
#  variables:
#    COMPONENT: db
#
#Scan ZK Image:
#  extends: .scan_template
#  needs:
#    - Build ZK Image
#  variables:
#    COMPONENT: zk
#
#Scan Internal Traefik Image:
#  extends: .scan_template
#  needs:
#    - Build Internal Traefik Image
#  variables:
#    COMPONENT: traefik-internal

############# Templates ###############

#.scan_template:
#  extends: container_scanning
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH'
#  variables:
#    DOCKER_IMAGE: registry.gitlab.msu.edu/msu-libraries/catalog/catalog/$COMPONENT:latest
#    GIT_STRATEGY: fetch
#    DOCKERFILE_PATH: $COMPONENT/Dockerfile

include:
#  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
